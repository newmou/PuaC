
## Acceleration of Molecular Shape Similarity Calculation Based on CUDA

### Installation on Linux
CMCA is designed to run on Linux operating systems with NVIDIA GPUs.
We have fully tested the program on NVIDIA GPU architectures with compute capability >= 3.7 and it has only been tested on the Tesla architecture and the Ampere architecture.
(check compute capability of your NVIDIA GPU on https://developer.nvidia.com/cuda-gpus#compute). 

#### Compiling requirement
CMCA should be compiled with GCC version 9.4.0 or later (supporting C++20 standard) and CUDA Toolkit version 11.3 or later. 
1. To check the GCC version, please use `gcc --version`. If the GCC version is older than 9.4.0, We can use the following command to install GCC 9.Run the following commands 
to update the package list and install the latest version of GCC.
- On Ubuntu
```bash
sudo apt update
sudo apt-get update
sudo apt-get install gcc-9 g++-9
```

- On anaconda3 without root privileges
```bash
conda create -n gcc9 
conda activate gcc9
conda install gcc_linux-64=9.4.0 gxx_linux-64=9.4.0
cd <anaconda3_root>/envs/gcc9/bin/  
ln -s x86_64-conda_cos6-linux-gnu-gcc gcc 
ln -s x86_64-conda_cos6-linux-gnu-g++ g++ 
export CC=<anaconda3_root>/envs/gcc9/bin/gcc  
export CX=<anaconda3_root>/envs/gcc9/bin/g++ 
```

2. To check the CUDA version, please use `nvcc --version`.
If CUDA isn't installed or with version older than 11.0, you can download and install CUDA from https://developer.nvidia.com/cuda-toolkit-archive. 

#### Build
CMSA uses cmake as the build system, and you can check cmake version using `cmake --version`.
CMake uses `nvcc_path` to detect the CUDA toolkit settings. 
The `nvcc_path` is `<cuda_path>/bin/nvcc` (eg `/usr/local/cuda/bin/nvcc`). 
Make sure that CUDA version >= 11.1 before building. 

Choose one of the following commands to build the source code based on your system environment.
- If cmake with version 3.16.3 or later has been installed:
```bash
git clone ---
cd CMCA 
mkdir build
cd build
export CC=<gcc_path>  # eg export CC=/usr/bin/gcc-9
export CXX=<g++_path> # eg export CX=/usr/bin/g++-9
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=<nvcc_path> .. 
make
```

- Otherwise:
```bash
git clone ---
cd CMCA
mkdir build
cd build
wget https://github.com/Kitware/CMake/releases/download/v3.16.3/cmake-3.16.3-linux-x86_64.tar.gz
tar -xzf cmake-3.16.3-linux-x86_64.tar.gz
export CC=<gcc_path>  # eg export CC=/usr/bin/gcc-9
export CXX=<g++_path> # eg export CXX=/usr/bin/g++-9
./cmake-3.16.3-linux-x86_64/bin/cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=<nvcc_path> .. 
make
```

Note that: if some requirements are not met during the CMake build, and you reinstall the required software, 
please delete `CMakeCache.txt` (if present) from the build directory first and re-run the building command.

### Usage
Run the CURC executable in the build directory with the options below:
```text
CUDA Compute Acclerator v1.0.0
Usage:
Note that: A run file contains one filename per line (specified as a relative
or absolute path). The first line contains the path to the 'reference' or
'query' molecule - the molecule onto which all of the 'fit' or 'database'
molecules are aligned. Each subsequent line should contain the path to
an individual 'fit' molecule.
  python cmca.py [OPTION...] [pair molecular file name]
  
  -rs --rocs                    Molecular similarity is expressed by Euclidean distance,Cosine Similarity,Correlation Coefficient
  -u  --usrcat                  usrcat is expressed by plog
  
  -ds --descriptor similarity   Molecular similarity is expressed by Euclidean distance,Cosine Similarity,Correlation Coefficient
  python cmca.py [OPTION...] [single molecular file name]
  
  -r, --rocs                    rocs martrix
  -d  --descriptor              The calculated Zernike polynomial value is obtained
  
  -v, --version                 print version
  -h, --help                    print usage
```

### GPU speedup and selection
GPU initialization could be slow on some systems. To avoid the impact of GPU initialization for CMCA, 
you can execute `nvidia-smi -l 10` in the background to warm up GPU from idle before running CMCA.
Another way is to enable persistence mode using `nvidia-smi -i <target gpu> -pm ENABLED`. 

If there are multiple GPUs in the system and some devices are occupied by other compute-intensive tasks, 
you can use `CUDA_VISIBLE_DEVICES` to make only those idle devices visible to CMCA. For example:
```bash
CUDA_VISIBLE_DEVICES=2      # specify gpu device 2 that CURC uses
```

### Block size
CMCA processes molecular files block by block. A block is defined as a single block size of 64,
which means that the entire molecule will be calculated into 64 blocks every 64 thread blocks. 
In general, larger thread blocks can take full advantage of parallelism, but may result in resource competition and increased scheduling latency. 
Smaller thread blocks reduce resource contention and scheduling latency
If the GPU has enough memory (e.g. 16gb), the block size can be set to a larger value (e.g. 64), otherwise,
The block size should be kept small to avoid out of memory problems (around 256 is reasonable).

### Example Usage
To be supplemented

```bash
python cmca.py rs aa2ar.sdf abl1.sdf   # molecular name is aa2ar and abl1
```library
impoty puaC
...
mols=puaC.MolSupplier("test1.sdf","test2.sdf")
...
print(mols.Compare)


### Part of Sample data
1.0:euclidean:0.795816955|cosine:0.653559209|correlation:0.938822278

2.0:euclidean:0.754523949|cosine:0.778944091|correlation:0.717781472

3.0:euclidean:0.848102859|cosine:0.706590738|correlation:0.693493409


### Publications

### Credits
CURC is based on the code of MSC and also uses parts of codes in backend encoding.

[PAPERâ€”Accelerating Parallel Evaluations of ROCS](https://github.com/alessandronascimento/molshacs)

[surface-based shape comparison methods](https://amp.readthedocs.io/en/v0.5/modules/descriptor.html)

