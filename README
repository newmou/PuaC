
## Acceleration of Molecular Shape Similarity Calculation Based on CUDA

### Installation on Linux
CMCA is designed to run on Linux operating systems with NVIDIA GPUs.
We have fully tested the program on NVIDIA GPU architectures with compute capability >= 3.7 and it has only been tested on the Tesla architecture and the Ampere architecture.
(check compute capability of your NVIDIA GPU on https://developer.nvidia.com/cuda-gpus#compute). 

#### Compiling requirement
CURC should be compiled with GCC version 9.4.0 or later (supporting C++20 standard) and CUDA Toolkit version 11.3 or later. 
1. To check the GCC version, please use `gcc --version`. If the GCC version is older than 9.4.0, you can use the following command to install GCC 9.
- On Ubuntu
```bash
sudo add-apt-repository ppa:jonathonf/gcc
sudo apt-get update
sudo apt-get install gcc-7 g++-7
```
- On CentOS
```bash
yum install centos-release-scl
yum install devtoolset-7-gcc-c++
scl enable devtoolset-7 bash # optional step (if you want to set GCC 7 as default compiler in bash)
```
- On anaconda3 without root privileges
```bash
conda create -n gcc7 
conda activate gcc7
conda install gcc_linux-64=7.3.0 gxx_linux-64=7.3.0
cd <anaconda3_root>/envs/gcc7/bin/  
ln -s x86_64-conda_cos6-linux-gnu-gcc gcc 
ln -s x86_64-conda_cos6-linux-gnu-g++ g++ 
export CC=<anaconda3_root>/envs/gcc7/bin/gcc  
export CXX=<anaconda3_root>/envs/gcc7/bin/g++ 
```

2. To check the CUDA version, please use `cat <cuda_path>/version.txt`(eg `cat /usr/local/cuda/version.txt`) or `nvcc --version`.
If CUDA isn't installed or with version older than 10.1, you can download and install CUDA from https://developer.nvidia.com/cuda-toolkit-archive. 

#### Build
CMSA uses cmake as the build system, and you can check cmake version using `cmake --version`.
CMake uses `nvcc_path` to detect the CUDA toolkit settings. 
The `nvcc_path` is `<cuda_path>/bin/nvcc` (eg `/usr/local/cuda/bin/nvcc`). 
Make sure that CUDA version >= 10.1 before building, and you can check CUDA version using `cat <cuda_path>/version.txt`). 

Choose one of the following commands to build the source code based on your system environment.
- If cmake with version 3.19 or later has been installed:
```bash
git clone ---
cd CMSA 
mkdir build
cd build
export CC=<gcc_path>  # eg export CC=/usr/bin/gcc-7
export CXX=<g++_path> # eg export CXX=/usr/bin/g++-7
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=<nvcc_path> .. 
make
```

- Otherwise:
```bash
git clone ---
cd CMSA
mkdir build
cd build
wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-linux-x86_64.tar.gz
tar -xzf cmake-3.21.3-linux-x86_64.tar.gz
export CC=<gcc_path>  # eg export CC=/usr/bin/gcc-7
export CXX=<g++_path> # eg export CXX=/usr/bin/g++-7
./cmake-3.21.3-linux-x86_64/bin/cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=<nvcc_path> .. 
make
```

Note that: if some requirements are not met during the CMake build, and you reinstall the required software, 
please delete `CMakeCache.txt` (if present) from the build directory first and re-run the building command.

### Usage
Run the CURC executable in the build directory with the options below:
```text
CUDA Read Compressor v1.0.0
Usage:
  cmsa [OPTION...]

      --working_dir arg         working directory (default: .)
  -c, --compress                compress file
  -d, --decompress              decompress archive
  -i, --input arg               input path (paired-end fastq paths are 
                                separated by commas)
  -o, --output arg              output file name (compressed output file 
                                use .curc as extension, decompressed output 
                                file use .seq as extension)
      --block_ratio arg         ratio of block size (default: 1)
      --flzma2_level arg        fast-lzma2 compression level [1...10] 
                                (default: 10)
      --flzma2_thread_num arg   fast-lzma2 compression/decompression thread 
                                number (default: 16)
      --preserve_order          preserve order information
      --decode_buffer_size arg  size of decompress buffer(MB) (default: 
                                1024)
  -v, --version                 print version
  -h, --help                    print usage
```

### GPU warmup and selection
GPU initialization could be slow on some systems. To avoid the impact of GPU initialization for CMSA, 
you can execute `nvidia-smi -l 10` in the background to warm up GPU from idle before running CMSA.
Another way is to enable persistence mode using `nvidia-smi -i <target gpu> -pm ENABLED`. 

If there are multiple GPUs in the system and some devices are occupied by other compute-intensive tasks, 
you can use `CUDA_VISIBLE_DEVICES` to make only those idle devices visible to CURC. For example:
```bash
CUDA_VISIBLE_DEVICES=2 ./curc <args>      # specify gpu device 2 that CURC uses
```

### Block ratio
CMSA processes molecular file block by block. The block ratio is defined as the single block size divided by the size of the entire FASTQ file.
The default value of block_ratio is 1, which means compressing the entire molecular in one block.
If the GPU has sufficient memory (eg, 16 GB), the block size can be set to a large value (eg, 50 GB), otherwise, 
the block size should be kept small to avoid the out-of-memory issue (around 20 GB is reasonable).

### Example Usage
To be supplemented

- To decompress paired-end compressed archive
```bash
./curc -d -i paired_end_archive.curc -o out   # decompressed output is out_1.seq and out_2.seq
```

### Sample data
|   dataset    |  download command | direct download link   |
|   :----:     |      :----:       |        :----:          |
|      all     |      `wget ---`   | [all.gz](https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR635/SRR635193/SRR635193_1.fastq.gz) |


### Publications

### Credits
CURC is based on the code of MSC and also uses parts of codes in backend encoding.

[PAPERâ€”Accelerating Parallel Evaluations of ROCS](https://github.com/alessandronascimento/molshacs)

[surface-based shape comparison methods](https://amp.readthedocs.io/en/v0.5/modules/descriptor.html)

